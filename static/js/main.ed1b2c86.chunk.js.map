{"version":3,"sources":["view/transaction-card/transaction-card.module.css","view/total/total.module.css","view/transaction-card/transaction-card.component.tsx","view/total/total.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","TransactionCard","memo","props","className","css","container","count","amount","date","Total","totalValue","initialDebt","total","client","ApolloClient","link","PrismicLink","uri","cache","InMemoryCache","getTotal","transactions","map","a","reduce","b","App","useState","setTransactions","useEffect","query","gql","then","response","console","log","data","allTransactions","edges","node","body","fields","catch","error","transaction","index","Intl","DateTimeFormat","dateStyle","timeStyle","format","Date","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,UAAY,oCAAoC,OAAS,mC,mBCA3ED,EAAOC,QAAU,CAAC,UAAY,yBAAyB,WAAa,4B,0LCQvDC,EAAkBC,gBAA2B,SAACC,GACzD,OACE,sBAAKC,UAAWC,IAAIC,UAApB,UACE,gDAAmBH,EAAMI,SACzB,2CACU,uBAAMH,UAAWC,IAAIG,OAArB,UAA8BL,EAAMK,OAApC,gBAEV,yCAAYL,EAAMM,c,iBCRXC,EAAQ,SAACP,GAAD,OACnB,sBAAKC,UAAWC,IAAIC,UAApB,mCACyB,IACvB,uBAAMF,UAAWC,IAAIM,WAArB,UACGR,EAAMS,YAAcT,EAAMU,MAD7B,iB,0jBCHJ,IAOMC,EAAS,IAAIC,IAAa,CAC9BC,KAAMC,sBAAY,CAChBC,IAAK,4CAEPC,MAAO,IAAIC,MA8Db,IAAMC,EAAW,SAACC,GAAD,OACfA,EAAaC,KAAI,SAACC,GAAD,OAAOA,EAAEhB,UAAQiB,QAAO,SAACD,EAAGE,GAAJ,OAAUF,EAAIE,MAE1CC,EA9Df,WAAgB,IAAD,EAC2BC,mBAA+B,MAD1D,mBACNN,EADM,KACQO,EADR,KAuCb,OApCAC,qBAAU,WACRhB,EACGiB,MAAM,CACLA,MAAOC,IAAF,OAsBNC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZ,IAAMZ,EACJY,EAASG,KAAKC,gBAAgBC,MAAM,GAAGC,KAAKC,KAAK,GAAGC,OACtDb,EAAgBP,MAEjBqB,OAAM,SAACC,GACNT,QAAQS,MAAMA,QAEjB,IAEKtB,EAGN,gCACGA,EAAaC,KAAI,SAACsB,EAAaC,GAAd,OAChB,cAAC7C,EAAD,CAEEM,MAAOuC,EACPtC,OAAQqC,EAAYrC,OACpBC,KAAM,IAAIsC,KAAKC,eAAe,QAAS,CACrCC,UAAW,OACXC,UAAW,SACVC,OAAO,IAAIC,KAAKP,EAAYpC,QAPjC,UACUoC,EAAYrC,OADtB,YACgCqC,EAAYpC,UAS9C,cAAC,EAAD,CAAOG,YApEQ,MAoEmBC,MAAOQ,EAASC,QAdpD,8CChDW+B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ed1b2c86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"transaction-card_container__3DRZs\",\"amount\":\"transaction-card_amount__2OhU9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"total_container__s0tCK\",\"totalValue\":\"total_totalValue__YSOQf\"};","import React, { memo } from \"react\";\r\nimport css from \"./transaction-card.module.css\";\r\n\r\ninterface TransactionCardProps {\r\n  count: number;\r\n  amount: number;\r\n  date: string;\r\n}\r\n\r\nexport const TransactionCard = memo<TransactionCardProps>((props) => {\r\n  return (\r\n    <div className={css.container}>\r\n      <div>Transaction #{props.count}</div>\r\n      <div>\r\n        Amount: <span className={css.amount}>{props.amount} &#8381;</span>\r\n      </div>\r\n      <div>From: {props.date}</div>\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport css from \"./total.module.css\";\r\n\r\ninterface TotalProps {\r\n  total: number;\r\n  initialDebt: number;\r\n}\r\n\r\nexport const Total = (props: TotalProps) => (\r\n  <div className={css.container}>\r\n    It remains to pay off:{\" \"}\r\n    <span className={css.totalValue}>\r\n      {props.initialDebt - props.total} &#8381;\r\n    </span>\r\n  </div>\r\n);\r\n","import React, { useEffect, useState } from \"react\";\nimport { PrismicLink } from \"apollo-link-prismic\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport ApolloClient from \"apollo-client\";\nimport gql from \"graphql-tag\";\nimport { TransactionCard } from \"./view/transaction-card/transaction-card.component\";\nimport { Total } from \"./view/total/total.component\";\n\nconst INITIAL_DEBT = 96500;\n\ninterface Transaction {\n  amount: number;\n  date: string;\n}\n\nconst client = new ApolloClient({\n  link: PrismicLink({\n    uri: \"https://debt-manager.prismic.io/graphql\",\n  }),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const [transactions, setTransactions] = useState<Transaction[] | null>(null);\n\n  useEffect(() => {\n    client\n      .query({\n        query: gql`\n          {\n            allTransactions {\n              edges {\n                node {\n                  body {\n                    __typename\n                    ... on TransactionBodyTransactions {\n                      type\n                      label\n                      fields {\n                        amount\n                        date\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n      })\n      .then((response) => {\n        console.log(response);\n        const transactions: { amount: number; date: string }[] =\n          response.data.allTransactions.edges[0].node.body[0].fields;\n        setTransactions(transactions);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, []);\n\n  return !transactions ? (\n    <div>Loading...</div>\n  ) : (\n    <div>\n      {transactions.map((transaction, index) => (\n        <TransactionCard\n          key={`${transaction.amount}_${transaction.date}`}\n          count={index}\n          amount={transaction.amount}\n          date={new Intl.DateTimeFormat(\"en-US\", {\n            dateStyle: \"full\",\n            timeStyle: \"long\",\n          }).format(new Date(transaction.date))}\n        />\n      ))}\n      <Total initialDebt={INITIAL_DEBT} total={getTotal(transactions)} />\n    </div>\n  );\n}\n\nconst getTotal = (transactions: Transaction[]): number =>\n  transactions.map((a) => a.amount).reduce((a, b) => a + b);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}