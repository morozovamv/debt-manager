{"version":3,"sources":["view/transaction-card/transaction-card.module.css","view/total/total.module.css","generated/graphql.tsx","view/transaction-card/transaction-card.component.tsx","view/total/total.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","SortDocumentsBy","SortTransactiony","TransactionCard","memo","props","className","css","container","count","amount","date","Total","totalValue","initialDebt","total","GetAllTransactionsDocument","gql","getTotal","transactions","map","a","getDefaultAmount","reduce","b","formatDate","undefined","Intl","DateTimeFormat","dateStyle","timeStyle","format","Date","App","baseOptions","useState","setTransactions","data","Apollo","useEffect","edges","allTransactions","length","body","node","fields","transaction","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","link","PrismicLink","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,UAAY,oCAAoC,OAAS,mC,mBCA3ED,EAAOC,QAAU,CAAC,UAAY,yBAAyB,WAAa,4B,gEC6HxDC,EAOAC,E,gEC5HCC,EAAkBC,gBAA2B,SAACC,GACzD,OACE,sBAAKC,UAAWC,IAAIC,UAApB,UACE,gDAAmBH,EAAMI,SACzB,2CACU,uBAAMH,UAAWC,IAAIG,OAArB,UAA8BL,EAAMK,OAApC,gBAEV,yCAA2B,OAAfL,EAAMM,KAAgB,UAAYN,EAAMM,c,iBCT7CC,EAAQ,SAACP,GAAD,OACnB,sBAAKC,UAAWC,IAAIC,UAApB,mCACyB,IACvB,uBAAMF,UAAWC,IAAIM,WAArB,UACGR,EAAMS,YAAcT,EAAMU,MAD7B,iB,6cFoHQd,K,4DAAAA,E,8DAAAA,E,0DAAAA,E,6DAAAA,M,cAOAC,K,4DAAAA,E,8DAAAA,E,0DAAAA,E,6DAAAA,M,KAoJL,IAAMc,EAA6BC,cAAH,KGvOvC,IAAMC,EAAW,SAACC,GAAD,OACfA,EACGC,KAAI,SAACC,GAAD,uBAAOA,EAAEX,cAAT,QAAmBY,OACvBC,QAAO,SAACF,EAAGG,GAAJ,OAAUH,EAAIG,MAEpBF,EAAmB,kBAAc,GAEjCG,EAAa,SAACd,GAClB,OAAa,OAATA,QAA0Be,IAATf,EACZ,IAAIgB,KAAKC,eAAe,QAAS,CACtCC,UAAW,OACXC,UAAW,SACVC,OAAO,IAAIC,KAAKrB,IAEd,MAGMsB,EAtDf,WAAgB,IHkTdC,EGlTa,EAC2BC,mBAA+B,MAD1D,mBACNhB,EADM,KACQiB,EADR,KAGLC,EHoTDC,WAGLtB,EAA4BkB,GGvTtBG,KAiBR,OAfAE,qBAAU,WACR,GAAIF,EAAM,CACR,IAAMG,EAAQH,EAAKI,gBAAgBD,MACnC,GAAc,OAAVA,QAA4Bd,IAAVc,GAAuBA,EAAME,OAAS,EAAG,CAAC,IAAD,IACvDC,EAAI,UAAGH,EAAM,UAAT,iBAAG,EAAUI,YAAb,aAAG,EAAgBD,KAC7B,GAAa,OAATA,QAA0BjB,IAATiB,GAAsBA,EAAKD,OAAS,EAAG,CAC1D,IAAMG,EAASF,EAAK,GAAGE,OACR,OAAXA,QAA8BnB,IAAXmB,GAAwBA,EAAOH,OAAS,GAC7DN,EAAgBS,QAKvB,CAACR,IAEIlB,EAGN,gCACGA,EAAaC,KAAI,SAAC0B,EAAaC,GAAd,aAChB,cAAC5C,EAAD,CAEEM,MAAOsC,EACPrC,OAAM,UAAEoC,EAAYpC,cAAd,QAAwBY,IAC9BX,KAAMc,EAAWqB,EAAYnC,OAJ/B,UACUmC,EAAYpC,OADtB,YACgCoC,EAAYnC,UAM9C,cAAC,EAAD,CAAOG,YAvCQ,MAuCmBC,MAAOG,EAASC,QAXpD,+CCpBW6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCDRQ,EAAS,IAAIC,eAAa,CAC9BC,KAAMC,sBAAY,CAChBC,IAAK,4CAEPC,MAAO,IAAIC,kBAGbC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,iBAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.0327dcfc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"transaction-card_container__3DRZs\",\"amount\":\"transaction-card_amount__2OhU9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"total_container__s0tCK\",\"totalValue\":\"total_totalValue__YSOQf\"};","import { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** DateTime */\n  DateTime: any;\n  /** Raw JSON value */\n  Json: any;\n  /** The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1. */\n  Long: any;\n};\n\nexport type Meta = {\n  __typename?: \"Meta\";\n  /** The id of the document. */\n  id: Scalars[\"String\"];\n  /** The uid of the document. */\n  uid?: Maybe<Scalars[\"String\"]>;\n  /** The type of the document. */\n  type: Scalars[\"String\"];\n  /** The tags of the document. */\n  tags: Array<Scalars[\"String\"]>;\n  /** The language of the document. */\n  lang: Scalars[\"String\"];\n  /** Alternate languages the document. */\n  alternateLanguages: Array<RelatedDocument>;\n  /** The first publication date of the document. */\n  firstPublicationDate?: Maybe<Scalars[\"DateTime\"]>;\n  /** The last publication date of the document. */\n  lastPublicationDate?: Maybe<Scalars[\"DateTime\"]>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: \"PageInfo\";\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars[\"Boolean\"];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars[\"Boolean\"];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars[\"String\"]>;\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type Query = {\n  __typename?: \"Query\";\n  _allDocuments: _DocumentConnection;\n  allTransactions: TransactionConnectionConnection;\n};\n\nexport type Query_AllDocumentsArgs = {\n  sortBy?: Maybe<SortDocumentsBy>;\n  id?: Maybe<Scalars[\"String\"]>;\n  id_in?: Maybe<Array<Scalars[\"String\"]>>;\n  uid?: Maybe<Scalars[\"String\"]>;\n  uid_in?: Maybe<Array<Scalars[\"String\"]>>;\n  lang?: Maybe<Scalars[\"String\"]>;\n  tags?: Maybe<Array<Scalars[\"String\"]>>;\n  tags_in?: Maybe<Array<Scalars[\"String\"]>>;\n  type?: Maybe<Scalars[\"String\"]>;\n  type_in?: Maybe<Array<Scalars[\"String\"]>>;\n  firstPublicationDate?: Maybe<Scalars[\"DateTime\"]>;\n  firstPublicationDate_after?: Maybe<Scalars[\"DateTime\"]>;\n  firstPublicationDate_before?: Maybe<Scalars[\"DateTime\"]>;\n  lastPublicationDate?: Maybe<Scalars[\"DateTime\"]>;\n  lastPublicationDate_after?: Maybe<Scalars[\"DateTime\"]>;\n  lastPublicationDate_before?: Maybe<Scalars[\"DateTime\"]>;\n  fulltext?: Maybe<Scalars[\"String\"]>;\n  similar?: Maybe<Similar>;\n  before?: Maybe<Scalars[\"String\"]>;\n  after?: Maybe<Scalars[\"String\"]>;\n  first?: Maybe<Scalars[\"Int\"]>;\n  last?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type QueryAllTransactionsArgs = {\n  sortBy?: Maybe<SortTransactiony>;\n  id?: Maybe<Scalars[\"String\"]>;\n  id_in?: Maybe<Array<Scalars[\"String\"]>>;\n  uid?: Maybe<Scalars[\"String\"]>;\n  uid_in?: Maybe<Array<Scalars[\"String\"]>>;\n  lang?: Maybe<Scalars[\"String\"]>;\n  tags?: Maybe<Array<Scalars[\"String\"]>>;\n  tags_in?: Maybe<Array<Scalars[\"String\"]>>;\n  type?: Maybe<Scalars[\"String\"]>;\n  type_in?: Maybe<Array<Scalars[\"String\"]>>;\n  firstPublicationDate?: Maybe<Scalars[\"DateTime\"]>;\n  firstPublicationDate_after?: Maybe<Scalars[\"DateTime\"]>;\n  firstPublicationDate_before?: Maybe<Scalars[\"DateTime\"]>;\n  lastPublicationDate?: Maybe<Scalars[\"DateTime\"]>;\n  lastPublicationDate_after?: Maybe<Scalars[\"DateTime\"]>;\n  lastPublicationDate_before?: Maybe<Scalars[\"DateTime\"]>;\n  fulltext?: Maybe<Scalars[\"String\"]>;\n  similar?: Maybe<Similar>;\n  before?: Maybe<Scalars[\"String\"]>;\n  after?: Maybe<Scalars[\"String\"]>;\n  first?: Maybe<Scalars[\"Int\"]>;\n  last?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type RelatedDocument = {\n  __typename?: \"RelatedDocument\";\n  /** The id of the document. */\n  id: Scalars[\"String\"];\n  /** The uid of the document. */\n  uid?: Maybe<Scalars[\"String\"]>;\n  /** The type of the document. */\n  type: Scalars[\"String\"];\n  /** The language of the document. */\n  lang: Scalars[\"String\"];\n};\n\nexport enum SortDocumentsBy {\n  MetaFirstPublicationDateAsc = \"meta_firstPublicationDate_ASC\",\n  MetaFirstPublicationDateDesc = \"meta_firstPublicationDate_DESC\",\n  MetaLastPublicationDateAsc = \"meta_lastPublicationDate_ASC\",\n  MetaLastPublicationDateDesc = \"meta_lastPublicationDate_DESC\",\n}\n\nexport enum SortTransactiony {\n  MetaFirstPublicationDateAsc = \"meta_firstPublicationDate_ASC\",\n  MetaFirstPublicationDateDesc = \"meta_firstPublicationDate_DESC\",\n  MetaLastPublicationDateAsc = \"meta_lastPublicationDate_ASC\",\n  MetaLastPublicationDateDesc = \"meta_lastPublicationDate_DESC\",\n}\n\nexport type Transaction = _Document &\n  _Linkable & {\n    __typename?: \"Transaction\";\n    body?: Maybe<Array<TransactionBody>>;\n    _meta: Meta;\n    _linkType?: Maybe<Scalars[\"String\"]>;\n  };\n\nexport type TransactionBody = TransactionBodyTransactions;\n\nexport type TransactionBodyTransactions = {\n  __typename?: \"TransactionBodyTransactions\";\n  type?: Maybe<Scalars[\"String\"]>;\n  label?: Maybe<Scalars[\"String\"]>;\n  fields?: Maybe<Array<TransactionBodyTransactionsFields>>;\n};\n\nexport type TransactionBodyTransactionsFields = {\n  __typename?: \"TransactionBodyTransactionsFields\";\n  receipt?: Maybe<Scalars[\"Json\"]>;\n  amount?: Maybe<Scalars[\"Float\"]>;\n  date?: Maybe<Scalars[\"DateTime\"]>;\n};\n\n/** A connection to a list of items. */\nexport type TransactionConnectionConnection = {\n  __typename?: \"TransactionConnectionConnection\";\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TransactionConnectionEdge>>>;\n  totalCount: Scalars[\"Long\"];\n};\n\n/** An edge in a connection. */\nexport type TransactionConnectionEdge = {\n  __typename?: \"TransactionConnectionEdge\";\n  /** The item at the end of the edge. */\n  node: Transaction;\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"];\n};\n\n/** A prismic document */\nexport type _Document = {\n  _meta: Meta;\n};\n\n/** A connection to a list of items. */\nexport type _DocumentConnection = {\n  __typename?: \"_DocumentConnection\";\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<_DocumentEdge>>>;\n  totalCount: Scalars[\"Long\"];\n};\n\n/** An edge in a connection. */\nexport type _DocumentEdge = {\n  __typename?: \"_DocumentEdge\";\n  /** The item at the end of the edge. */\n  node: _Document;\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"];\n};\n\n/** An external link */\nexport type _ExternalLink = _Linkable & {\n  __typename?: \"_ExternalLink\";\n  url: Scalars[\"String\"];\n  target?: Maybe<Scalars[\"String\"]>;\n  _linkType?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A linked file */\nexport type _FileLink = _Linkable & {\n  __typename?: \"_FileLink\";\n  name: Scalars[\"String\"];\n  url: Scalars[\"String\"];\n  size: Scalars[\"Long\"];\n  _linkType?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A linked image */\nexport type _ImageLink = _Linkable & {\n  __typename?: \"_ImageLink\";\n  name: Scalars[\"String\"];\n  url: Scalars[\"String\"];\n  size: Scalars[\"Long\"];\n  height: Scalars[\"Int\"];\n  width: Scalars[\"Int\"];\n  _linkType?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A prismic link */\nexport type _Linkable = {\n  _linkType?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type Similar = {\n  documentId: Scalars[\"String\"];\n  max: Scalars[\"Int\"];\n};\n\nexport type GetAllTransactionsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type GetAllTransactionsQuery = { __typename?: \"Query\" } & {\n  allTransactions: { __typename?: \"TransactionConnectionConnection\" } & {\n    edges?: Maybe<\n      Array<\n        Maybe<\n          { __typename?: \"TransactionConnectionEdge\" } & {\n            node: { __typename?: \"Transaction\" } & {\n              body?: Maybe<\n                Array<\n                  { __typename: \"TransactionBodyTransactions\" } & Pick<\n                    TransactionBodyTransactions,\n                    \"type\" | \"label\"\n                  > & {\n                      fields?: Maybe<\n                        Array<\n                          {\n                            __typename?: \"TransactionBodyTransactionsFields\";\n                          } & Pick<\n                            TransactionBodyTransactionsFields,\n                            \"date\" | \"amount\"\n                          >\n                        >\n                      >;\n                    }\n                >\n              >;\n            };\n          }\n        >\n      >\n    >;\n  };\n};\n\nexport const GetAllTransactionsDocument = gql`\n  query getAllTransactions {\n    allTransactions {\n      edges {\n        node {\n          body {\n            __typename\n            ... on TransactionBodyTransactions {\n              type\n              label\n              fields {\n                date\n                amount\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetAllTransactionsQuery__\n *\n * To run a query within a React component, call `useGetAllTransactionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllTransactionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllTransactionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllTransactionsQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    GetAllTransactionsQuery,\n    GetAllTransactionsQueryVariables\n  >\n) {\n  return Apollo.useQuery<\n    GetAllTransactionsQuery,\n    GetAllTransactionsQueryVariables\n  >(GetAllTransactionsDocument, baseOptions);\n}\nexport function useGetAllTransactionsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetAllTransactionsQuery,\n    GetAllTransactionsQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<\n    GetAllTransactionsQuery,\n    GetAllTransactionsQueryVariables\n  >(GetAllTransactionsDocument, baseOptions);\n}\nexport type GetAllTransactionsQueryHookResult = ReturnType<\n  typeof useGetAllTransactionsQuery\n>;\nexport type GetAllTransactionsLazyQueryHookResult = ReturnType<\n  typeof useGetAllTransactionsLazyQuery\n>;\nexport type GetAllTransactionsQueryResult = Apollo.QueryResult<\n  GetAllTransactionsQuery,\n  GetAllTransactionsQueryVariables\n>;\n\nexport interface PossibleTypesResultData {\n  possibleTypes: {\n    [key: string]: string[];\n  };\n}\nconst result: PossibleTypesResultData = {\n  possibleTypes: {\n    TransactionBody: [\"TransactionBodyTransactions\"],\n    _Document: [\"Transaction\"],\n    _Linkable: [\"Transaction\", \"_ExternalLink\", \"_FileLink\", \"_ImageLink\"],\n  },\n};\nexport default result;\n","import { memo } from \"react\";\r\nimport css from \"./transaction-card.module.css\";\r\n\r\ninterface TransactionCardProps {\r\n  count: number;\r\n  amount: number;\r\n  date: string | null;\r\n}\r\n\r\nexport const TransactionCard = memo<TransactionCardProps>((props) => {\r\n  return (\r\n    <div className={css.container}>\r\n      <div>Transaction #{props.count}</div>\r\n      <div>\r\n        Amount: <span className={css.amount}>{props.amount} &#8381;</span>\r\n      </div>\r\n      <div>From: {props.date === null ? \"unknown\" : props.date}</div>\r\n    </div>\r\n  );\r\n});\r\n","import css from \"./total.module.css\";\r\n\r\ninterface TotalProps {\r\n  total: number;\r\n  initialDebt: number;\r\n}\r\n\r\nexport const Total = (props: TotalProps) => (\r\n  <div className={css.container}>\r\n    It remains to pay off:{\" \"}\r\n    <span className={css.totalValue}>\r\n      {props.initialDebt - props.total} &#8381;\r\n    </span>\r\n  </div>\r\n);\r\n","import { useEffect, useState } from \"react\";\nimport { TransactionCard } from \"./view/transaction-card/transaction-card.component\";\nimport { Total } from \"./view/total/total.component\";\nimport { useGetAllTransactionsQuery } from \"./generated/graphql\";\n\n// TODO: move to prismic\nconst INITIAL_DEBT = 96500;\n\ninterface Transaction {\n  amount?: number | null;\n  date?: string;\n}\n\nfunction App() {\n  const [transactions, setTransactions] = useState<Transaction[] | null>(null);\n\n  const { data } = useGetAllTransactionsQuery();\n\n  useEffect(() => {\n    if (data) {\n      const edges = data.allTransactions.edges;\n      if (edges !== null && edges !== undefined && edges.length > 0) {\n        const body = edges[0]?.node?.body;\n        if (body !== null && body !== undefined && body.length > 0) {\n          const fields = body[0].fields;\n          if (fields !== null && fields !== undefined && fields.length > 0) {\n            setTransactions(fields);\n          }\n        }\n      }\n    }\n  }, [data]);\n\n  return !transactions ? (\n    <div>Loading....</div>\n  ) : (\n    <div>\n      {transactions.map((transaction, index) => (\n        <TransactionCard\n          key={`${transaction.amount}_${transaction.date}`}\n          count={index}\n          amount={transaction.amount ?? getDefaultAmount()}\n          date={formatDate(transaction.date)}\n        />\n      ))}\n      <Total initialDebt={INITIAL_DEBT} total={getTotal(transactions)} />\n    </div>\n  );\n}\n\nconst getTotal = (transactions: Transaction[]): number =>\n  transactions\n    .map((a) => a.amount ?? getDefaultAmount())\n    .reduce((a, b) => a + b);\n\nconst getDefaultAmount = (): number => 0;\n\nconst formatDate = (date: string | null | undefined): string | null => {\n  if (date !== null && date !== undefined) {\n    return new Intl.DateTimeFormat(\"en-US\", {\n      dateStyle: \"full\",\n      timeStyle: \"long\",\n    }).format(new Date(date));\n  }\n  return null;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { PrismicLink } from \"apollo-link-prismic\";\n\nconst client = new ApolloClient({\n  link: PrismicLink({\n    uri: \"https://debt-manager.prismic.io/graphql\",\n  }),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}