{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["client","ApolloClient","link","PrismicLink","uri","cache","InMemoryCache","App","useState","transactions","setTransactions","useEffect","query","gql","then","response","console","log","data","allTransactions","edges","node","body","fields","catch","error","total","map","a","amount","reduce","b","transaction","index","date","undefined","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"szBAMA,IAOMA,EAAS,IAAIC,IAAa,CAC9BC,KAAMC,sBAAY,CAChBC,IAAK,4CAEPC,MAAO,IAAIC,MAgEEC,MA7Df,WAAgB,IAAD,EAC2BC,mBAA+B,MAD1D,mBACNC,EADM,KACQC,EADR,KAGbC,qBAAU,WACRX,EACGY,MAAM,CACLA,MAAOC,IAAF,OAsBNC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZ,IAAMN,EACJM,EAASG,KAAKC,gBAAgBC,MAAM,GAAGC,KAAKC,KAAK,GAAGC,OACtDb,EAAgBD,MAEjBe,OAAM,SAACC,GACNT,QAAQS,MAAMA,QAEjB,IAEH,IAAMC,EAAK,OAAGjB,QAAH,IAAGA,OAAH,EAAGA,EAAckB,KAAI,SAACC,GAAD,OAAOA,EAAEC,UAAQC,QAAO,SAACF,EAAGG,GAAJ,OAAUH,EAAIG,KAEtE,OAAQtB,EAGN,gCACGA,EAAakB,KAAI,SAACK,EAAaC,GAAd,OAChB,gCACE,gDACgBA,EAAQ,EADxB,SACiCD,EAAYE,QAE7C,qDAAiBF,EAAYH,OAA7B,gBAJF,UAAaG,EAAYH,OAAzB,YAAmCG,EAAYE,eAOtCC,IAAVT,GACC,0DApEa,MAoE+BA,EAA5C,kBAESS,IAAVT,GAAuB,qEAd1B,8CChDWU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.41bbecd2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { PrismicLink } from \"apollo-link-prismic\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport ApolloClient from \"apollo-client\";\nimport gql from \"graphql-tag\";\n\nconst INITIAL_DEBT = 96500;\n\ninterface Transaction {\n  amount: number;\n  date: string;\n}\n\nconst client = new ApolloClient({\n  link: PrismicLink({\n    uri: \"https://debt-manager.prismic.io/graphql\",\n  }),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const [transactions, setTransactions] = useState<Transaction[] | null>(null);\n\n  useEffect(() => {\n    client\n      .query({\n        query: gql`\n          {\n            allTransactions {\n              edges {\n                node {\n                  body {\n                    __typename\n                    ... on TransactionBodyTransactions {\n                      type\n                      label\n                      fields {\n                        amount\n                        date\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n      })\n      .then((response) => {\n        console.log(response);\n        const transactions: { amount: number; date: string }[] =\n          response.data.allTransactions.edges[0].node.body[0].fields;\n        setTransactions(transactions);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, []);\n\n  const total = transactions?.map((a) => a.amount).reduce((a, b) => a + b);\n\n  return !transactions ? (\n    <div>Loading...</div>\n  ) : (\n    <div>\n      {transactions.map((transaction, index) => (\n        <div key={`${transaction.amount}_${transaction.date}`}>\n          <div>\n            Transaction #{index + 1} from {transaction.date}\n          </div>\n          <div>Amount: {`${transaction.amount} rubles`}</div>\n        </div>\n      ))}\n      {total !== undefined && (\n        <div>It remains to pay off: {INITIAL_DEBT - total} rubles</div>\n      )}\n      {total === undefined && <div>it remains to pay off: ? rubles</div>}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}